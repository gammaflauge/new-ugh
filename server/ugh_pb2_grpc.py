# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import ugh_pb2 as ugh__pb2


class UghStub(object):
  """service for tracking issue from Ugh redcap
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetAllIssues = channel.unary_stream(
        '/ugh.Ugh/GetAllIssues',
        request_serializer=ugh__pb2.Empty.SerializeToString,
        response_deserializer=ugh__pb2.Issue.FromString,
        )


class UghServicer(object):
  """service for tracking issue from Ugh redcap
  """

  def GetAllIssues(self, request, context):
    """streams over all of the issues from ugh redcap
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UghServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetAllIssues': grpc.unary_stream_rpc_method_handler(
          servicer.GetAllIssues,
          request_deserializer=ugh__pb2.Empty.FromString,
          response_serializer=ugh__pb2.Issue.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'ugh.Ugh', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
